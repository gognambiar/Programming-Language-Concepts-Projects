				Test Cases for Part 2

Test Case 1
-----------

int i;
i = 0;
end

Bytecodes:

0: iconst_0
1: istore_0
2: return

---------------

Test Case 2 - literal constants

int i1, j23, k456;
i1 = 5;
j23 = 127;
k456 = 128;
end

Bytecodes:

0: iconst_5
1: istore_0
2: bipush 127
4: istore_1
5: sipush 128
8: istore_2
9: return 

----------------

Test Case 3 - compound statements

int a, b, c;
{a = 1;
 { b = 2;
   { c = 3;
   }
   b = b + c;
 }
 a = a + b;
}
end

Bytecodes:

0: iconst_1
1: istore_0
2: iconst_2
3: istore_1
4: iconst_3
5: istore_2
6: iload_1
7: iload_2
8: iadd
9: istore_1
10: iload_0
11: iload_1
12: iadd
13: istore_0
14: return

----------------

Test Case 4 - expressions and statements  

int x, y, z, p, q;
x = 1;
y = x*10 - 1;
z = y*100 + x * 10;
p = ((x + 1) * (y - 20)) / (z+300);
q = p * p;
q = q - 1;
end

Bytecodes:

0: iconst_1
1: istore_0
2: iload_0
3: bipush 10
5: imul
6: iconst_1
7: isub
8: istore_1
9: iload_1
10: bipush 100
12: imul
13: iload_0
14: bipush 10
16: imul
17: iadd
18: istore_2
19: iload_0
20: iconst_1
21: iadd
22: iload_1
23: bipush 20
25: isub
26: imul
27: iload_2
28: sipush 300
31: iadd
32: idiv
33: istore_3
34: iload_3
35: iload_3
36: imul
37: istore 4
39: iload 4
41: iconst_1
42: isub
43: istore 4
45: return

----------------
Test Case 5 - 'If' without 'else'

int marks, level;

marks = 66;
level = 0;

if (marks < 10) level = 1;
if (marks > 50) level = 5;
if (marks == 100) level = 10;
end

Bytecodes:

0: bipush 66
2: istore_0
3: iconst_0
4: istore_1
5: iload_0
6: bipush 10
8: if_icmpge 13
11: iconst_1
12: istore_1
13: iload_0
14: bipush 50
16: if_icmple 21
19: iconst_5
20: istore_1
21: iload_0
22: bipush 100
24: if_icmpne 30
27: bipush 10
29: istore_1
30: return

----------------

Test Case 6 - Nested if-else

int x, y, z, max, min;

x = 30; y = 20; z = 10;

if (x > y)
   if (y > z)
      {min = z; max = x; }
   else 
      {min = y;
       if (x > z)
           max = x;
       else
         	max = z;
      }
else 
   if (y < z)
     	 {min = x; max = z;}
  else
     	 {max = y;
       if (x < z)
          min = x;
       else
          min = z;
     	 }
end

Bytecodes:

0: bipush 30
2: istore_0
3: bipush 20
5: istore_1
6: bipush 10
8: istore_2
9: iload_0
10: iload_1
11: if_icmple 45
14: iload_1
15: iload_2
16: if_icmple 27
19: iload_2
20: istore 4
22: iload_0
23: istore_3
24: goto 42
27: iload_1
28: istore 4
30: iload_0
31: iload_2
32: if_icmple 40
35: iload_0
36: istore_3
37: goto 42
40: iload_2
41: istore_3
42: goto 74
45: iload_1
46: iload_2
47: if_icmpge 58
50: iload_0
51: istore 4
53: iload_2
54: istore_3
55: goto 74
58: iload_1
59: istore_3
60: iload_0
61: iload_2
62: if_icmpge 71
65: iload_0
66: istore 4
68: goto 74
71: iload_2
72: istore 4
74: return

-------------------

Test Case 7 - find log_2(n), i.e., integer log(n) to base 2

int i, n;
n = 32;
for (i = 0; n > 1; i = i + 1)
	 n = n / 2;
end

Bytecodes:

0: bipush 32
2: istore_1
3: iconst_0
4: istore_0
5: iload_1
6: iconst_1
7: if_icmple 21
10: iload_1
11: iconst_2
12: idiv
13: istore_1
14: iload_0
15: iconst_1
16: iadd
17: istore_0
18: goto 5
21: return

-------------------

Test Case 8 - nested summation

int i, j, k, s1, s2, s3;

s1=0; 
for(i=0; i<5; i=i+1) {
   s2=0;
   for(j=0; j<5; j=j+1) {
      s3=0;
      for(k=0; k<5; k=k+1)
         s3= (s3 + j*k) -i;
      s2=s2 + (i+j)*s3;
      }
   s1=s1 + i*s2;
}
end


Bytecodes:

0: iconst_0
1: istore_3
2: iconst_0
3: istore_0
4: iload_0
5: iconst_5
6: if_icmpge 78
9: iconst_0
10: istore 4
12: iconst_0
13: istore_1
14: iload_1
15: iconst_5
16: if_icmpge 64
19: iconst_0
20: istore 5
22: iconst_0
23: istore_2
24: iload_2
25: iconst_5
26: if_icmpge 46
29: iload 5
31: iload_1
32: iload_2
33: imul
34: iadd
35: iload_0
36: isub
37: istore 5
39: iload_2
40: iconst_1
41: iadd
42: istore_2
43: goto 24
46: iload 4
48: iload_0
49: iload_1
50: iadd
51: iload 5
53: imul
54: iadd
55: istore 4
57: iload_1
58: iconst_1
59: iadd
60: istore_1
61: goto 14
64: iload_3
65: iload_0
66: iload 4
68: imul
69: iadd
70: istore_3
71: iload_0
72: iconst_1
73: iadd
74: istore_0
75: goto 4
78: return

-------------------

Test Case 9 - find gcd(x, y)

int x, y;
x = 121;
y = 132;
for( ; x != y ; )
  if (x > y) 
        x = x - y; 
  else  y = y - x;
end

Bytecodes:

0: bipush 121
2: istore_0
3: sipush 132
6: istore_1
7: iload_0
8: iload_1
9: if_icmpeq 31
12: iload_0
13: iload_1
14: if_icmple 24
17: iload_0
18: iload_1
19: isub
20: istore_0
21: goto 28
24: iload_1
25: iload_0
26: isub
27: istore_1
28: goto 7
31: return

--------------------------
Test Case 10 - prime number testing

int n, s, i, p;
n = 61;
for (s=1 ; s*s < n ;)
      s = s + 1;
i = 2;
p = 1;
for ( ; i < s+1 ; i = i+1 )
      if (p == 1) 
		if ( (n/i)*i == n)
		   p = 0;
end

Bytecodes:

0: bipush 61
2: istore_0
3: iconst_1
4: istore_1
5: iload_1
6: iload_1
7: imul
8: iload_0
9: if_icmpge 19
12: iload_1
13: iconst_1
14: iadd
15: istore_1
16: goto 5
19: iconst_2
20: istore_2
21: iconst_1
22: istore_3
23: iload_2
24: iload_1
25: iconst_1
26: iadd
27: if_icmpge 53
30: iload_3
31: iconst_1
32: if_icmpne 46
35: iload_0
36: iload_2
37: idiv
38: iload_2
39: imul
40: iload_0
41: if_icmpne 46
44: iconst_0
45: istore_3
46: iload_2
47: iconst_1
48: iadd
49: istore_2
50: goto 23
53: return

----------------- End of Test Cases for Part 2 --------------


