let incr = Ln.Lf.Lx.((n f) (f x))

let insert = Le.Lq.Lc.Ln.((q c) ((c e) n))

let add = Ln1.Ln2.Lf.Lx.((n1 f) ((n2 f) x))

let mult =  Ln1.Ln2.Lf.(n1 (n2 f))

let true = Lx1.Lx2.x1

let false = Lx1.Lx2.x2

let not = Lb.((b false) true)

let is0 = Ln.((n Lx.false) true)

let if = Lp.Lt.Le.((p t) e)

let pair = Lx1.Lx2.Lc.((c x1) x2)

let left = Lc.(c true)

let right = Lc.(c false)

let pmap = Lx1.((pair (incr (left x1))) (left x1))

let pred = Lx1.(right ((x1 pmap) ((pair 0) 0)))

letrec times = Ln1.Ln2.(((if (is0 n1)) 0) ((add n2) ((times (pred n1)) n2)))

let t = Lf.Ln1.Ln2.(((if (is0 n1)) 0) ((add n2) ((times (pred n1)) n2)))

let Y = Lf.(Lx.(f (x x)) Lx.(f (x x)))

let length = Ln.Lf.Lx.((n Lc.f) (Lx.x x))

